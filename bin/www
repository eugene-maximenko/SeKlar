#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('back25:server');
var http = require('http');
const socketio = require('socket.io');
const {updateInteractiveSection, pickRandomFinancialEvent, pickRandomStockMarketCard,} = require('./utils/cards')
const {addUser, updateStateDelta, applyStateDelta, updateStock, prepareStockState, approveStockOperation } = require('./utils/users')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketio(server);
io.on('connection', (socket) => {

  let stockCompanyName = null
  let actualStockPrice = null

  socket.on('user:join', () => {
    
      // Notification about new connection
      console.log('User opened the game page')
      const user = addUser({id: socket.id})  

      socket.emit('state:display', user)
    }) 

  socket.on('game:start', ()=>{
    const randomFinancialEvent = pickRandomFinancialEvent()
  
    updateStateDelta({id: socket.id, cashAmountDelta: randomFinancialEvent.amount})
    socket.emit("randomEventCard:display", randomFinancialEvent)
  })

  socket.on('state:approveUpdate', () => {

    const user = applyStateDelta(socket.id)
    socket.emit('state:display', user)
    const randomStockCard = pickRandomStockMarketCard()

    stockCompanyName = randomStockCard.companyName
    actualStockPrice = randomStockCard.actualPrice
    
    socket.emit('stockMarketCard:display', 
      randomStockCard
    )
  })

  socket.on('state:stockUpdate', ({amount, operationType}) => {

    console.log('We got state:stockUpdate event from client :)');

    console.log(amount,operationType);

    const stockOperationIsApproved = approveStockOperation({amount, id: socket.id,operationType, actualStockPrice, stockCompanyName})

    if(stockOperationIsApproved) {
      
      const cashAmountDelta = -updateStock({amount, operationType, id : socket.id, stockCompanyName, actualStockPrice})

      updateStateDelta({id: socket.id, cashAmountDelta })
      const user = applyStateDelta(socket.id)
      socket.emit('state:display', user)
  
      const stockState = prepareStockState(socket.id)
      socket.emit('state:stockDisplay', stockState)

      const randomStockCard = pickRandomStockMarketCard()

      if(randomStockCard.companyName in stockState) {
            randomStockCard.amountOnHands = stockState[randomStockCard.companyName].amount
            randomStockCard.averagePrice = stockState[randomStockCard.companyName].averagePrice
          } else {
            randomStockCard.amountOnHands = 0
          }

          stockCompanyName = randomStockCard.companyName
          actualStockPrice = randomStockCard.actualPrice
          
          socket.emit('stockMarketCard:display', 
            randomStockCard)
            } else {
              socket.emit('notification:operationIsNotApproved')
            }
  }
    

  //  to try number of stocks 
/* 
) */
   ) 



    
})

  /**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
